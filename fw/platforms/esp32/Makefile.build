MAKEFLAGS += --warn-undefined-variables --silent
.DEFAULT_GOAL := all

APP ?= mongoose-os
APP_PLATFORM = esp32
APP_CFLAGS ?=
APP_CONF_SCHEMA ?=
APP_EXTRA_SRCS ?=
APP_VERSION ?=
APP_BUILD_ID ?=
FFI_SYMBOLS ?=
# List of app source files, globs are supported
APP_SOURCES ?=
# List of app files to put into the device's filesystem, globs are supported
APP_FS_FILES ?=

# NOTE: those two are deprecated. Use APP_SOURCES and APP_FS_FILES instead.
APP_MODULES ?=
APP_FS_PATH ?=

# For backward compatibility, convert old APP_MODULES and APP_FS_PATH into
# new APP_SOURCES and APP_FS_FILES
ifneq "$(APP_MODULES)" ""
APP_SOURCES += $(foreach m,$(APP_MODULES),$(m)/*.c $(m)/*.cpp)
endif
ifneq "$(APP_FS_PATH)" ""
APP_FS_FILES += $(foreach m,$(APP_FS_PATH),$(m)/*)
endif

APP_FS_DIRS = $(sort $(dir $(APP_FS_FILES)))

MGOS_ENABLE_ATCA ?= 1
MGOS_ENABLE_SNTP ?= 1

MGOS_PATH ?= ../../..
COMMON_PATH ?= $(MGOS_PATH)/common
SPIFFS_PATH ?= $(COMMON_PATH)/spiffs
MGOS_ESP_PATH ?= $(MGOS_PATH)/fw/platforms/esp32
MGOS_ESP_SRC_PATH ?= $(MGOS_PATH)/fw/platforms/esp32/src
COMMON_FS_PATH ?= $(MGOS_PATH)/fw/skeleton/fs

BUILD_DIR ?= $(CURDIR)/.build
FS_STAGING_DIR = $(BUILD_DIR)/fs
FW_STAGING_DIR ?= $(BUILD_DIR)/fw_temp
FW_DIR ?= $(CURDIR)/firmware
GEN_DIR ?= $(BUILD_DIR)/gen

export APP_SLOT_SIZE = 0x100000
FS_IMG = $(FW_STAGING_DIR)/fs.img
export FS_ADDR = 0x110000
export FS_SIZE = 131072
FS_BLOCK_SIZE = 4096
FS_PAGE_SIZE = 256
FS_ERASE_SIZE = 4096
export NVS_ADDR = 0x9000
export NVS_SIZE = 0x4000
export OTA_DATA_ADDR = 0xd000
export OTA_DATA_SIZE = 0x2000
MAP_FILE = $(BUILD_DIR)/$(APP).map
BREAKDOWN_FILE = $(BUILD_DIR)/breakdown.txt

# Absolutize all paths which can be given by the caller
override APP_SOURCES := $(abspath $(APP_SOURCES))
override APP_FS_FILES := $(abspath $(APP_FS_FILES))
override APP_CONF_SCHEMA := $(abspath $(APP_CONF_SCHEMA))
override APP_EXTRA_SRCS := $(abspath $(APP_EXTRA_SRCS))
override BUILD_DIR := $(abspath $(BUILD_DIR))
override FW_STAGING_DIR := $(abspath $(FW_STAGING_DIR))
override FW_DIR := $(abspath $(FW_DIR))
override GEN_DIR := $(abspath $(GEN_DIR))
override MGOS_PATH := $(abspath $(MGOS_PATH))
override _MGOS_PATH = $(MGOS_PATH)
# It seems to be impossible to override vars passed to submake from the
# command line, so we pass them via a separate set of varoables, which
# submake then uses to override the values it received.
export APP_BUILD_ID
export _APP_CONF_SCHEMA = $(APP_CONF_SCHEMA)
export _APP_EXTRA_SRCS = $(APP_EXTRA_SRCS)
export _APP_FS_FILES = $(APP_FS_FILES)
export _APP_SOURCES = $(APP_SOURCES)
export APP_VERSION
export _BUILD_DIR = $(BUILD_DIR)
export FFI_SYMBOLS
export _FW_DIR := $(FW_DIR)
export _GEN_DIR := $(GEN_DIR)
export MGOS_ENABLE_ATCA
export MGOS_ENABLE_SNTP
export MGOS_ESP_PATH
export MGOS_ESP_SRC_PATH
export _MGOS_PATH
export SPIFFS_PATH

export BUILD_INFO_JSON = $(GEN_DIR)/build_info.json

CFLAGS += -DMGOS_APP=\"$(APP)\" -DCS_SPIFFS_ENABLE_VFS -I$(MGOS_PATH) \
          -DFW_ARCHITECTURE=$(APP_PLATFORM) \
          -DIRAM='__attribute__((section(".iram1")))' \
          $(APP_CFLAGS)

# Settings for the ESP-IDF build system
# See docs here:
#   https://github.com/espressif/esp-idf/blob/master/docs/build_system.rst

PROJECT_NAME = $(APP)
BUILD_DIR_BASE = $(BUILD_DIR)

SRCDIRS = $(MGOS_ESP_PATH)/src
# Explicitly specify SDK components to build. Notably, we do not build BT.
COMPONENT_DIRS = $(COMMON_PATH) $(MGOS_PATH)/third_party /opt $(MGOS_ESP_PATH) $(IDF_PATH)/components
SDK_COMPONENTS = app_update bootloader bootloader_support driver esp32 esptool_py \
                 ethernet expat freertos log lwip micro-ecc newlib \
                 nvs_flash partition_table spi_flash tcpip_adapter vfs \
                 wpa_supplicant xtensa-debug-module
COMPONENTS = $(SDK_COMPONENTS) cryptoauthlib cs_mbedtls spiffs

# CONFIG_BT_RESERVE_DRAM is used when generating linker script and is not
# defined when bt is not built.
CPPFLAGS += -DCONFIG_BT_RESERVE_DRAM=0

ESPFLASHMODE = qio
ESPFLASHSIZE = 4MB
ESPBAUD = 1500000

SDKCONFIG = $(MGOS_ESP_PATH)/sdkconfig

PARTITION_TABLE_CSV_PATH = $(MGOS_ESP_PATH)/src/partitions_mgos.csv
MKSPIFFS = /usr/local/bin/mkspiffs8

include $(IDF_PATH)/make/project.mk

LDFLAGS += -L$(BUILD_DIR)/src

include $(MGOS_PATH)/fw/common.mk

FW_PARTS = boot:type=boot,addr=0x1000,src=$(BOOTLOADER_BIN),encrypt=true \
           pt:type=pt,addr=$(PARTITION_TABLE_OFFSET),src=$(PARTITION_TABLE_BIN),encrypt=true \
           nvs:type=nvs,addr=$(NVS_ADDR),size=$(NVS_SIZE),fill=0xff,encrypt=false \
           otadata:type=otadata,addr=$(OTA_DATA_ADDR),size=$(OTA_DATA_SIZE),fill=0xff,encrypt=true \
           app:type=app,addr=$(CONFIG_APP_OFFSET),src=$(APP_BIN),encrypt=true \
           fs:src=$(FS_IMG),type=fs,addr=$(FS_ADDR),fs_size=$(FS_SIZE),fs_block_size=$(FS_BLOCK_SIZE),fs_page_size=$(FS_PAGE_SIZE),fs_erase_size=$(FS_ERASE_SIZE)

export CONFIG_APP_OFFSET

include $(MGOS_PATH)/common/scripts/fw_meta.mk
include $(MGOS_PATH)/fw/src/spiffs.mk

all: $(FW_STAGING_DIR) $(FW_DIR) $(GEN_DIR) $(FW_ZIP) $(BREAKDOWN_FILE)

FS_FILES += $(GEN_DIR)/conf0.json $(GEN_DIR)/sys_config_schema.json $(GEN_DIR)/sys_ro_vars_schema.json

$(FW_DIR) $(FW_STAGING_DIR) $(GEN_DIR):
	$(vecho) "MKDIR $@ $(BUILD_INFO_C)"
	$(Q) mkdir -p $@

$(FW_MANIFEST): $(APP_BIN) $(BOOTLOADER_BIN) $(PARTITION_TABLE_BIN) $(FS_IMG)

# sys_config is generated during binary build
$(GEN_DIR)/sys_config_schema.json $(GEN_DIR)/sys_ro_vars_schema.json: all_binaries

$(GEN_DIR)/conf0.json: all_binaries
	$(Q) cp -f $(GEN_DIR)/sys_config_defaults.json $(GEN_DIR)/conf0.json

$(FS_IMG): $(MKSPIFFS) $(APP_FS_DIRS) $(COMMON_FS_PATH) $(FS_FILES)
	$(call mkspiffs,$(FS_SIZE))

$(BREAKDOWN_FILE) : $(APP_BIN)
	$(vecho) "Generating breakdown"
	$(Q) python $(COMMON_PATH)/tools/breakdown.py $(MAP_FILE) \
         .iram0.vectors,.iram0.text,.flash.rodata,.flash.text \
         .dram0.data,.dram0.bss /opt > $(BREAKDOWN_FILE)

clean:
	rm -rf $(BUILD_DIR) $(FW_DIR)
