// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp8266

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x58\xbb\xd2\x25\xb7\xcd\xcc\xff\xa7\xf8\xea\x8b\x37\x68\x00\x24\x86\x54\x36\x03\x12\xaf\xa1\xda\xfa\xa5\x50\xb2\x4b\x5a\x07\x2e\x97\xdf\xdd\xd5\xe4\x9c\xcb\xae\x1c\xf8\x04\xc3\x19\xde\x00\x02\x8d\x06\x78\xfe\xf5\xf9\xff\x7f\xfb\xe5\xd7\x9f\xff\xfc\xf6\xf5\x8f\x6f\x9f\x3f\x7d\x08\x8e\x72\x74\x14\x94\x2f\x1f\x6b\xe4\xf3\xa7\x8f\x4f\x34\x00\x70\x48\xec\x76\xff\xd8\x36\xe4\xb4\x44\x6b\x77\xdf\x6e\xe5\x1e\x57\xc9\x9e\x59\x24\xaf\xcc\x80\x02\x38\x1a\xb4\xae\xef\x3d\xd6\x24\x6b\x66\x97\xf4\x4c\x3d\xb5\xd4\xb3\x96\x3d\xd3\x1a\x9a\xc1\x70\x94\x11\xc3\xc2\x6f\x1d\x1a\x74\x8f\x9f\x0d\x5d\xae\xcb\xaf\x0e\x2e\xf4\x35\x56\xe5\x72\xf7\x8e\xca\x79\xf5\x30\x87\x94\x0e\xc5\x65\xe6\x0e\x1b\xd9\x3c\x8d\xb2\x67\x3c\x35\xe2\xf8\x48\x3c\x7f\x42\x2d\x4b\x03\x0a\x80\x72\xb2\xbd\x4a\xe9\x6c\x45\x43\x12\xd1\x55\x46\x17\x99\x1d\x32\x06\x14\xdd\x44\x29\xa4\xcc\x01\xb3\xd0\xa8\x1e\x8a\xc3\x56\x9f\x85\x45\xf5\xa2\x38\xb0\xce\xba\x4c\x08\x8b\x12\xd5\xbb\xc2\x63\x60\xce\x73\x8c\xe6\x30\x40\xa1\x51\x04\x92\xf2\x98\x59\xfd\x54\x94\xd0\x11\x89\x80\x8e\x40\x84\x47\x9c\x53\x87\xcc\x33\x13\x4e\x47\x28\x0c\x59\xaa\x0f\xcb\xd1\x9c\xf6\xe5\x5a\x6a\x95\x15\x32\xdb\x63\xb7\x19\x4d\x07\x22\x82\x7b\xcd\x40\x1c\x36\xe6\xa5\xe7\x88\xf2\x9d\xfc\xf9\x94\x3f\xa2\xe8\xbb\xf4\xea\x57\xe4\x0c\xa7\xf1\x2c\x6a\x34\xa7\xc5\x2c\x9c\x3b\xac\x93\x1d\x81\x66\x42\x31\xa3\x89\x44\x53\x99\x0d\x42\xdb\x09\x6e\x4b\x97\x8d\x13\x5d\xe6\x2e\xc0\x8d\x2b\x69\x7d\xd9\xbd\x35\x24\xdb\xf3\x6e\xad\xec\xfe\x12\xdb\x1f\x47\xd9\xfd\x0d\xbb\xed\xf7\x3c\xa0\x2f\x3f\x75\x3d\x71\xa1\x43\x24\x10\xea\xa2\x67\xd0\x4f\x01\x55\x75\x91\x53\xa0\xa2\x30\xbe\x07\x38\x7e\x0d\x3e\xfb\xe4\xb3\x25\x9f\x47\xe1\x68\x42\xe6\x78\x58\x22\x60\xcb\x9f\xaa\xd5\x9b\x89\xab\xaa\x48\xe8\xdd\x6b\x4a\xeb\x4b\x85\x5c\x4f\x6b\x13\x1d\x16\x45\xab\x63\x48\x9d\xd2\xcf\xcc\x94\xbe\xd0\xdf\x7b\x66\x95\x91\x0b\xf7\xb3\x9e\x75\xe6\x99\xd3\x64\x8c\xcc\xd9\x51\x67\x87\x96\x81\x39\x3a\x52\xf5\x04\x6a\xa5\x5e\x02\x19\xf1\xd8\x9f\x38\xcc\x34\x3d\x85\xa1\xa9\xdb\xb0\x6a\xb0\xb2\x0e\x4b\x6f\x74\x9e\xf9\xe4\xbb\x0c\x7f\xae\xd3\x10\x6f\x88\x62\xa5\xd6\x0b\xa8\xaa\xa2\x32\x07\x6a\xb8\x26\x60\xeb\x64\x4b\x79\x98\xf4\x91\xa9\xc7\x65\xd2\xd8\xaf\x18\xa1\xb6\xce\x3e\xb0\xc6\x1e\x38\x4d\x45\xa8\xf4\x83\x27\x1a\xa3\x38\x4e\x4a\x52\x91\x89\xd5\xfb\x98\x47\x4f\x0c\x1d\x43\x10\x8e\xba\x30\xc3\x59\xd9\xa3\x53\x1e\xb2\x2e\xcf\x8c\x60\x94\xc8\x7a\x9f\xab\xbf\xf0\x5d\xf7\x9e\xa7\xea\xe0\xeb\x61\xe3\x3c\xf6\x59\xb5\x61\xd9\x62\x6b\x9b\xc5\x1a\xa6\x0e\x48\xd1\x73\x01\xed\x7a\xea\x70\x8f\xc4\x73\xa4\xbe\xb4\xeb\x2b\x52\xaf\xf2\xf2\xfa\x63\x6f\x46\x01\x85\x0f\xcd\x79\xf7\x76\x24\x84\x4e\x7d\xd8\xf5\x4d\xb3\x85\x34\xa5\xa4\xf5\x9d\xc7\xa5\x0c\x13\xdc\x9e\xab\x2d\x53\xd5\x27\x4f\x4f\x50\x6f\x9f\x44\x2d\xf3\xb1\xcf\xf6\x82\x71\x9d\x86\x8f\x33\x73\x51\x9f\x9c\xfa\xee\xc7\xda\x04\xe4\x1f\xc8\x89\x1f\xfa\x03\x56\x48\xa7\xeb\x10\x9b\x5f\x2c\x2a\xb9\x72\xc5\xae\x2b\xfc\xa6\xea\x1d\xb7\xd4\x5a\xf4\xda\xd1\x13\x7c\x3f\x07\x9f\x7d\xf2\xd9\x92\xcf\xa3\x9f\x22\x2f\xbe\xbc\x99\xbe\xed\xb6\xde\xed\x71\xf7\x1f\xe5\x6e\x1f\xfd\x21\x77\x96\xd8\xad\x44\xb9\x76\x1c\x5b\xac\xb8\x95\x1c\x99\x64\x8a\x09\x97\xa4\xbf\xba\xcb\xec\x45\xb2\x9b\xa0\x1f\x32\x7a\x95\x1d\xd7\x72\xba\x6b\x87\xab\x90\xd1\x43\x87\x08\x4d\xa3\x44\xbc\x49\x6a\x92\xb0\x52\x4e\xb3\xda\x61\xb6\xb8\x32\xd5\x43\xce\x39\x50\x6a\xa8\x96\xe3\x32\xda\xc5\xc8\x9f\x03\x01\x39\x5e\x16\x94\x59\x99\xb9\xb8\x4a\x4f\x7a\xb2\x14\x67\x5a\x74\xd5\x7b\xbc\x64\x52\x9e\x36\x68\x62\x68\x60\x1c\xd7\x5c\x19\x61\x9a\x4c\x64\x96\x81\x41\xf9\xda\x60\x36\x40\x56\xd5\x17\xce\x44\xd1\x07\x6c\x28\x36\x1b\x61\x71\xc1\x1e\xe5\x4a\x6a\xb4\x57\xf9\x53\xab\x22\xa3\x66\x12\x09\xd4\xa7\x34\x4e\x74\x36\x32\x74\xf7\xb9\x7a\x01\x5c\x86\x64\x0a\xdc\x1b\x15\x66\x6e\x3c\x2c\xc5\x4c\x06\xd8\x6f\xd6\x88\x68\x23\x03\x44\xa5\xed\xd5\x8b\x8a\x17\x17\xdb\x72\x82\xe7\x26\x8c\xce\x87\x24\x42\x38\x50\x0e\x1e\x07\xbe\xf2\xf5\x1a\xd7\xc3\xd2\x9a\x4b\xe8\x6b\x85\x2f\xc1\x7e\x18\xc1\x24\xd7\xc8\xb4\x81\x10\xd0\x58\x90\x72\xbd\xac\x7c\xf1\x2c\x24\x99\x53\x15\x72\x3d\x2d\x40\xc4\xee\x8c\x54\xc3\x88\x53\xdd\xdd\x35\x8a\xee\x3c\x53\xa3\x6a\x5f\x31\xbd\x10\xd9\x0e\x89\xe6\x32\x5a\x95\xd9\x8a\x64\xb3\x95\x71\x74\x65\x9c\xeb\xc6\x5b\xdc\xed\x78\xe0\x6f\x21\xad\x4b\xce\x8d\x34\xa2\x8b\x68\x23\xd2\x88\xb8\x18\x24\x50\xa2\x6d\x0e\xe8\x18\x28\x26\xe4\x97\x1e\x52\xc8\xaa\x7e\x63\x08\xae\x83\xa7\xc9\x1b\x13\xac\x39\x76\x5e\xd4\x95\xc9\x1f\xb8\x54\xe9\x41\x3c\x25\xb3\x63\x42\xf4\x89\x87\xe2\xac\xad\x74\xa1\x18\x22\xf9\x86\xc3\x9e\x99\xb4\xde\x8d\xb5\x20\x1f\xb8\xca\xf4\xbd\x6f\x36\x2e\xc3\x24\x56\xca\xda\xb5\x3f\xd9\xac\x45\x5d\xec\xef\x16\x2e\x6d\xef\xd7\xae\xe5\x0d\xd9\xde\x48\x94\x24\xf6\xe4\xc9\x77\x67\x1c\x63\xeb\xf1\xda\x51\xde\xe2\x82\x59\xc4\x76\xb4\xdd\xfe\x14\x79\x1b\xb5\x77\x7f\xb6\xa7\x26\x79\xce\x99\xab\xee\xa8\x7e\x46\x36\x95\x20\x2a\xe4\x38\x6f\xeb\x9c\xc6\x0d\xdb\x6b\xa7\xe8\xef\x3b\x1d\xaf\x9c\x37\x10\x5d\xa2\xfd\x2f\x7e\xdf\x25\x86\x3f\xb9\xaa\xdc\xdf\xb9\x7e\x0f\xff\xaf\xba\xa0\x43\x4c\xf2\x5c\x75\x29\xab\x2a\x75\xc1\x41\x4c\xdc\x4c\xaf\x6e\x8f\x5c\x10\x0d\xa6\x88\x10\x54\x2f\xb1\x56\xd4\x47\x35\xc9\xc0\xda\x38\x50\xd2\x10\x33\x84\x30\xca\x74\x47\xb2\x3d\xf1\xdd\x8e\x55\x21\x51\xf7\x37\x7d\x03\xc8\xb4\x6c\x6f\xf5\x26\x8f\x7b\x0a\xfa\x45\x1b\x04\x03\x4c\x04\x21\x86\x2a\x09\xec\x84\x58\xa8\x1c\x68\x27\x16\x24\x45\x04\x97\xb7\xd5\xaf\x17\x60\x4b\x3f\xc3\xaa\x03\x1a\x98\x6d\xe8\xf2\xbb\x06\x3a\x69\xf6\x4a\xf4\x39\xd7\x74\x6d\x10\x6b\x22\xad\x9e\xf4\xc6\xaa\x2e\x2d\x84\x78\xae\x0f\x3b\xbe\x56\x46\x95\x93\x2b\x4f\xc5\x7c\xac\x2c\xf4\x6e\xbd\x58\x67\x2f\x5d\x9a\x73\x4e\xe1\x21\x9d\xfc\x4e\x5b\xd0\xb3\x20\x95\xc3\xfd\xfa\x61\x6d\x6d\x26\xad\x06\x3d\xe4\xcc\x01\x8c\x75\xca\xe7\x29\xfe\x8b\x7c\xbf\xe5\xc7\xfb\x1e\xa8\xac\x60\xe1\x73\xf9\x79\xc5\x80\x14\x67\x2d\x57\x6a\x12\xcd\x3e\xef\x1a\x99\x1b\x8e\x67\x1c\x86\xb3\x56\xde\x95\x22\x75\xa7\xa5\x75\x57\xae\x95\x4e\xda\x36\xde\x35\xf7\x23\xd3\xee\x59\xa8\x7c\xd9\xe3\xa6\xa1\x79\xee\xdb\xcb\xe5\xba\x18\x82\x88\x45\xbb\x24\xda\xb9\x3c\x6e\xf8\xee\xd6\xb1\xd0\x59\xb2\xb4\xc2\x1b\xcb\xe3\x5e\x75\xe3\xe1\x31\x65\xa3\x76\x59\xe0\x58\x1c\x88\xb0\x7b\x48\x76\xbd\x4c\x5e\x2b\xb8\xe2\xae\x8b\x31\x57\x7f\x6d\xb6\xbe\x35\xca\xca\xb3\x11\x3a\x77\x3d\xcd\xdc\x50\xc8\x52\x78\xe4\xdd\x85\xf9\x85\xe2\x39\x33\xc9\x84\x1b\xc3\x50\x56\xd2\x44\x71\x96\x37\x76\xba\x56\x96\xbc\x96\xcd\x4c\x51\x4a\x70\x5f\x65\x9d\x9a\x4f\xd6\x78\x7f\xb7\xc5\x5c\x45\xaa\xe6\xac\x92\x2d\xe7\xb1\x72\x2d\x25\x38\x2b\x59\x60\xed\xb7\x67\x8b\x93\xb4\x75\x65\x4e\x2c\x2e\x7c\xe5\x07\xd6\x87\x8a\x52\x65\x33\xcf\x5c\x33\x9e\x8c\xf3\x42\x09\x0d\xc0\xd0\x6f\x75\x8d\x0e\x9e\x6d\xd0\x1b\x6f\x19\xd7\xdd\x43\xb2\x5c\x2a\xb6\x18\x6e\xe7\x98\x72\xa9\xbe\xd5\xd5\x47\x2f\x59\x6d\x71\xdc\xab\xba\xb6\x91\x68\x8f\x3a\xea\xad\xc6\x7e\x30\xd3\x3b\x1b\xed\xfb\xe3\xe2\x16\x5b\x77\xac\xf9\x98\x6b\xdf\xdd\x8f\xbc\xd8\xf5\x8a\xff\xd9\xdb\x8a\x7f\xf2\xc0\xe8\x5d\xf2\xf6\x89\xf1\x0e\xaa\x27\x41\xb2\x38\xeb\x46\xf0\x80\xce\xa3\x6b\x16\x04\xc6\x1e\x4f\x3d\x31\xae\xe6\x18\x4f\x24\xbd\x7c\x48\x6f\x61\x1e\xa2\x05\x79\x74\x95\x60\xe5\xca\x3a\x73\x3e\xad\x53\xb9\x3e\x56\x6c\x1e\xac\x5b\xd6\xf7\x58\xef\xb5\xdc\xbc\x50\x58\xaf\x34\xc8\x38\xd5\x8a\x16\x32\xcc\x35\x06\xe3\xd1\x8e\x3e\xa2\x3e\x2a\xdf\xe5\xbb\x11\xb7\xde\xf3\xc9\x88\x41\x9d\x9d\x11\xa2\x03\x83\x51\x32\x5a\x97\xd9\x9a\x64\x3b\xfe\x12\x31\x07\xb9\xc3\x24\xa6\xd2\x4e\xa3\xd9\x0f\xf7\xf3\xed\x65\xde\x83\x0d\x45\xca\x22\xc9\x06\xde\xd4\xb1\xfe\x77\xb8\xb1\x38\x56\xee\x0c\x10\x87\xf9\xf2\x05\xef\xac\xef\xfe\xf8\xfc\xf2\xf1\xf9\xeb\xef\xdf\xfe\xf8\xe7\xf3\x0f\x12\x95\x86\x2f\x1f\x9f\xbf\xff\xe3\xb7\x9f\xff\xfe\xf5\x8f\xaf\xbf\xfd\xc9\x91\x2f\x1f\x9f\xfb\xe3\xaf\xff\xa6\x70\xf2\x2f\x5f\xbf\x7d\xfd\xfc\xe9\xe3\x73\x4e\xd4\x95\x8b\x2e\x38\x5b\xbd\xdb\x72\xb7\x7e\xee\xf6\xb0\xbb\x8d\xef\xdb\xcf\x7b\xaf\x77\x29\xe6\x07\x73\xc0\xbf\xff\xef\x3f\x01\x00\x00\xff\xff\xf2\xf3\xb9\xb9\xcf\x11\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 4559, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

