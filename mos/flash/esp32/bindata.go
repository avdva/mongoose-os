// Code generated by go-bindata.
// sources:
// data/stub_flasher.json
// DO NOT EDIT!

package esp32

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _dataStub_flasherJson = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x57\xbd\xb2\xac\x27\xae\xcd\xef\x53\xec\xda\xf1\x09\x96\x04\x12\xc2\x99\x10\x1f\xaf\xe1\x3a\x75\xed\xd0\x9e\x29\xfb\x4c\x30\x35\x35\xef\x3e\x25\xf8\xfa\x67\xdb\x1d\x34\xdd\x48\x80\x90\x96\x96\xc4\x7f\x3e\xff\xff\x1f\xbf\xfc\xfa\xf3\x9f\x3f\xbe\xff\xf1\xe3\xf3\xa7\x0f\x42\xab\xa5\x90\x0a\x7f\xfb\xd8\x92\xcf\x9f\x3e\x3e\x61\xc0\xaa\x65\x51\x9c\x11\x78\x1b\x67\x59\x30\xc3\xf9\x9c\x91\x6e\x79\xd1\x4a\x00\xd3\xb2\xb5\x9c\x96\xaf\x65\xfb\x7b\xd0\x1a\x6b\x05\x18\xc0\x34\xf0\x45\x4b\xd6\x5a\xfb\xdb\xdc\x7c\xf8\xf0\x23\xed\x86\xab\xa3\xa3\xd5\x19\x57\x87\xa2\x9f\x73\xc2\x60\x47\x83\x0d\x8b\x46\x89\xd2\x61\xcc\x35\xb6\x6c\xd0\x88\x88\x8e\x91\x7a\xa3\x95\x00\x79\x87\x61\xf4\xae\x8a\x3e\x57\xd5\x55\xd2\x9a\xeb\x65\x47\x87\xd1\x5c\x78\x7e\x08\x88\xe0\x80\x56\xd4\x7b\xbc\xef\x03\xc1\xa8\x75\x82\x4b\x30\x8b\x9a\xa0\x95\x3d\x57\xa2\xb0\x28\x04\xed\x12\x15\xa0\x44\x4d\xb9\x43\x8b\xd7\x0a\x45\x3d\x5b\x3b\x3c\x2a\x19\xad\xba\xd6\xb5\x9d\x26\x3a\x1c\xb5\x70\x3a\xb3\xc0\x6b\x20\x42\x0b\x4f\x94\xe2\xe2\x91\x7b\xee\x75\x8c\x55\x45\x27\xaf\x69\x9a\x3e\x74\x38\x96\x18\x5d\xf1\xd8\xe9\x0a\xf7\x02\xe6\x40\xa1\xab\xad\xc5\x70\x09\x70\x2b\xe5\x32\xf7\xca\x55\x51\x5e\x16\x5c\x4f\x0b\x66\xb0\x33\x4f\x5e\xe0\x7d\xbe\xe8\xe0\x75\x1d\x8f\x94\x10\xce\x5f\x25\xf4\x1e\xdb\x1e\x51\x4f\xbc\xd3\x7f\xe8\x15\xb8\xf1\xd1\x62\x3a\xa4\xe2\x0a\x6d\xc8\x4b\x9b\x5a\x8e\xfd\x9e\x17\xf0\x4c\x7f\x0e\x1c\x79\xd4\x33\xae\x5b\x9f\x62\x8e\xd4\xdb\xfe\x26\x04\x44\x58\x89\xdc\x27\xe8\x78\xdf\x28\xe3\x77\x2c\x2f\xc1\x2a\xda\x85\xe4\x44\x41\xd9\x51\x4a\xc6\x81\xc4\x45\x3a\x20\x13\x5e\xa2\xaa\xa8\x3a\x55\x25\xef\x19\xfb\xfc\x6e\xe7\xb7\x9b\x6a\x87\x19\x5d\xba\x56\xf3\xa6\x39\x33\xe8\x92\xb5\x72\x3e\x26\xd4\x3b\x9a\xb3\x03\x62\x69\xcb\xf5\xee\xbb\x4e\x17\xad\xe5\xec\x04\x3a\x68\x1a\x86\xee\xf0\xc1\x38\xff\xbd\xa3\xe7\x6a\x4e\x90\x5d\x8f\x75\xce\x41\x6a\x88\x3a\x2e\xa9\x0d\x09\x60\xa2\x4b\x27\xcc\x94\xaf\xed\x54\xf2\x6b\x2d\x81\x95\x80\xb5\xd1\xa9\x33\x0c\xab\xce\x28\xe6\xa9\x1d\x46\x1e\x2f\x14\x75\x47\xce\x58\xde\x49\x04\x7a\x12\x72\x6b\x4e\x23\xd7\x2f\x9a\x43\x78\x0a\xe1\x20\xa2\x47\xa9\x8c\x8e\x25\x0c\x8b\x4a\x3d\x6f\x19\xfb\xae\x73\xdb\xe5\xc6\x99\xab\xd6\x8a\x8c\xd2\xd9\xe9\x91\x39\x66\x68\x69\xdb\x6a\xc3\xa0\x04\x27\x46\x82\x09\x30\x0a\x7e\x9c\x98\x32\x4e\x4b\x9e\xb2\xb1\x5e\xd6\x98\xa3\x19\x8d\xa7\x67\x5e\x3b\x27\x26\xc1\x79\xf6\xba\xee\x59\x4e\x94\x18\x8d\xfe\xd0\xfe\x62\xdf\x46\x8a\x19\xf4\xfc\x6f\xdb\x2a\xeb\xd0\xd0\x4d\x4c\xdb\xab\xda\xd7\xea\xac\xfa\x88\xc1\xc8\xc8\x56\x97\x32\x1e\xbb\x95\x5c\xc7\x55\x67\xac\xc5\x01\x7f\xf7\x73\xae\x11\x23\x0c\xca\x78\xba\xff\x65\x3e\x30\x54\x4a\x32\x55\x40\xb1\xbd\x5b\x42\xee\xf3\x4b\xa8\x9a\x1e\x3b\x4a\x34\xcd\x4c\x78\xf1\xce\x31\x50\xed\x8c\x72\x8f\xed\x9e\x9f\xc6\xd7\xe6\x23\xf4\x92\x79\x92\xf9\xc1\xa4\xb4\x62\x2d\x04\x1a\xb9\xaa\x74\x68\xa7\xd5\xd6\x52\x9e\x44\x68\xac\x4a\x2e\xc1\x56\xdb\xe8\x60\x28\xe7\xad\x67\x1e\x62\xe3\x61\x39\x94\xda\x39\x29\x91\x56\x21\xa6\xc5\x27\x78\x4c\x90\x20\x12\x13\xb4\xf0\x8a\x97\x3b\x34\xb3\x71\xcc\x34\xf2\x7a\x21\x7a\x42\x73\x4d\xec\x79\x7b\x46\x5f\x9c\x59\xbc\xb5\xd2\x4a\xc3\x92\x9d\x3b\x89\x7b\x71\x27\x95\x92\xac\xaa\xd5\x49\x4c\xf3\xa6\x42\x17\xaf\x65\xcc\x4a\x4e\x2e\x22\x06\x31\x58\x0b\x48\x2b\xe6\x01\xcd\xfb\x1d\xb9\xb5\xd2\xf8\x3a\xbf\x4b\x2b\x16\xd3\x69\xf6\xb5\x46\xfa\xd5\xdd\x8d\xda\x13\xf5\x4e\x53\x57\x56\xb1\x71\x24\xb3\x3d\xef\x1f\xb0\xd0\x84\x97\x44\x31\xdb\x91\x92\xa8\x56\x77\xa4\x24\xc4\x78\xbe\xea\xc3\xb8\xe3\x51\x34\x88\x49\x28\x92\x43\xc2\x37\xf3\x28\xd7\x36\x04\x6c\xca\x35\x63\x24\x95\xa1\x14\x19\x0f\x57\x3a\x7e\x97\x27\x92\xea\xf6\xbb\xef\x48\x19\xc9\x13\xd1\x59\x52\x5e\x11\x88\x99\xd9\x11\x4f\xff\x5b\xa8\xef\xb3\x4a\xdc\x71\xfb\xe2\xf9\x66\x24\x4f\x76\xf4\x68\xf5\xec\xff\x92\xd6\xf5\xf2\x48\x32\xde\xd8\x72\x82\xbb\xa5\x15\x78\x93\x96\x77\x7f\x0d\x7a\x48\x9a\x33\x37\x94\x92\x75\xe2\x2a\xab\x3b\xcd\x99\x75\x3d\x73\x21\x75\x87\x0f\x32\xaa\xed\xcd\xf3\xfd\x7d\xa7\x64\xa8\x23\xd1\x89\xf2\xca\x81\xf2\xec\x2b\x32\x17\xec\xfe\x7f\x3e\xe9\xef\x0d\x8f\x00\x73\x07\x9d\x5e\x82\xf7\xf7\xdd\x0b\x74\x58\x9f\xe0\x67\x67\x60\x1d\xcc\x04\xd1\xca\xbb\xf7\xd0\xb5\x12\xb5\xcf\xde\xc2\x4e\x0d\x4e\x24\xa6\x32\xe5\x02\x32\xea\x4f\x66\xbf\x23\x1e\xb6\xfb\x1c\xaa\x8f\x3e\x20\x13\x33\xb3\x9d\x68\x33\x07\xb1\xd0\x48\x0c\x93\xef\xc8\x2f\x80\xd9\xd7\x5a\xcc\x95\x08\xcc\x48\x4d\x35\x06\x87\x72\x4f\xf6\xda\xbd\x4e\x6a\x81\x99\x39\x2b\xf2\x29\xa3\x79\xef\x64\xd0\xdc\x97\xa0\x42\xbb\xc2\x11\xab\x9a\x4b\x06\x88\x86\x11\xb9\x8c\xb1\x56\x55\xea\x3b\xf2\x94\x9e\x65\x49\x2c\xd4\xad\xeb\x5e\xeb\x43\x37\x8c\x93\x00\x64\xeb\x97\xbf\xed\x2f\x89\xef\x5c\x33\x9c\xfd\x7d\xcd\xb4\x42\x97\x24\xff\x55\xcd\xca\xfe\xbe\xce\x25\x77\x4a\xeb\x95\xf2\x34\xcc\xe7\xca\x74\x38\xb3\x64\xef\x51\xef\xbe\xe5\x78\xc1\x34\x2f\x79\xc9\xa2\xb5\xa0\x8f\xdb\xa6\x2f\xa6\xbc\x18\x34\x35\x5f\xeb\x1c\xb7\x9f\x71\xfb\x79\xcb\x55\x70\xe1\xf6\xea\x69\x08\x8f\x0e\x82\x86\x0b\xe6\x43\x66\x1c\xbc\x12\xd3\x68\x75\x28\x67\x75\xd0\xb0\xb5\xbe\xf4\x79\xbd\xa2\xae\x6a\x95\x6a\x7f\xf6\xb3\x77\xbc\x1f\xa4\x7c\xd0\x97\x1e\xe0\x9d\x6d\x82\x28\x9b\x2d\xe3\xf4\x35\x35\x62\xe7\xba\x46\x3a\xa4\xa2\x58\xe1\x3d\x56\x93\x23\x37\x3e\x7c\x9d\xf8\x35\x5a\xbc\x71\x8b\xcd\xda\x9e\x98\xdb\xb6\x6d\x7c\x3e\x33\xef\x5a\x2b\xe8\x5a\x5b\x67\x38\x22\x02\x81\xf4\xee\x59\xff\xe4\x2d\x77\x0c\xff\xca\xcf\x83\xae\x9e\xab\xbd\xad\x6b\x52\xd9\xbd\x75\xc6\x63\xf7\x2f\xb8\xb2\x4f\xc1\xe9\x7d\x6f\x94\x67\x34\xc8\x37\x2b\xdb\x5e\xfb\x88\x46\xea\x8f\x99\xf1\xa4\x63\x15\x6d\x8d\x67\xbc\x5e\x98\x40\xbd\x24\x69\xf1\x44\xde\x91\x45\xde\x69\xee\x9e\x7f\x3e\xf9\x86\x55\x39\x2b\xc3\xab\x07\xda\xfd\xe4\xee\xab\x6f\xb6\x2b\x46\xfc\x97\xfc\xf3\xda\xf9\x51\xef\x36\x63\x70\x22\x23\xf2\xce\xf3\xc9\x98\x13\xce\xad\xfb\xaa\xc9\x0f\x6d\xcb\x0f\x6e\x0f\xc6\xd6\x93\x8b\xea\x84\xb7\x46\x5e\xcc\xd8\x31\x87\xb5\xee\xd4\xde\x3b\xca\x3d\x1f\xd6\xc8\xd1\xf7\xef\xb9\x7f\x4b\xec\x5a\xbe\x77\x10\x76\xd3\xca\xd9\x00\xd3\x60\x2e\xad\x73\xc4\xa9\x16\x79\x7e\xb9\xed\x7b\xf9\xb2\xa4\x6d\x37\xcb\x2d\xe3\xc3\x6b\x56\xde\xde\x49\x7d\xdf\xe6\xd9\xf9\x24\x3d\x81\xab\x68\xb5\xb5\xfa\x1b\xcb\xfd\x55\xf6\xde\x3d\xf0\xcd\x9f\xfc\xc6\xa3\xf7\xa3\x6c\xf7\xe1\xaf\xf9\xba\xab\xfd\xc5\xcb\xcb\xaa\xc6\x35\xf1\xba\x32\x6f\xf4\x81\x53\x95\xfd\xc2\x98\x9b\x69\xe3\x85\x38\x62\xd1\xc8\xe2\x63\x99\x8f\xd9\xcb\x31\xb8\x10\xca\x46\x60\x32\xb3\xca\xea\xc9\x7d\x8e\x47\x27\xc7\xac\x65\x63\xee\x4a\xe4\xe7\x6b\xe5\xd9\xcb\xf1\x5b\xb7\xc7\xa2\xcd\xde\xee\x59\xd0\x2e\x9b\xad\xd0\xf5\x9c\x2d\x7b\x05\xa3\xf0\xa3\xb7\x66\x43\x11\x6d\xbc\x56\x79\x20\xb8\x3e\xb4\xbb\xa1\x9c\x2a\x96\xfc\xfe\x58\x61\x1d\x65\x18\xa8\x6c\x4e\xb1\x8d\xea\x1b\xf1\xe0\xd2\xcb\xc3\xa3\x66\x27\x7f\xf3\x29\xf9\xc2\xdf\x3b\xea\x32\xfd\x88\x0a\x8c\x2a\xe5\xbb\xb5\x60\x8c\x60\x86\xa3\xe5\x1b\xa5\x7f\xc5\xf1\xe7\xb7\x8f\xcf\x5f\x7f\xff\xf1\xc7\xbf\x9f\x0f\xed\x82\xae\xdf\x3e\x3e\x7f\xff\xd7\x6f\x3f\xff\xf3\xfb\x1f\xdf\x7f\xfb\x33\x25\xdf\x3e\x3e\xcf\x9f\xbf\xbd\xca\xab\x7d\xfb\xf8\xfc\xe5\xfb\x8f\xef\xf9\x2a\x1f\x23\x1b\xc1\x8a\x59\xce\x78\xdd\xff\xd1\x20\x39\xb2\x9f\xb1\x94\x33\x56\x7c\x1d\x3f\xef\xbd\xde\x4f\x29\xd2\x5a\xef\xfa\xdf\xff\xfb\x5f\x00\x00\x00\xff\xff\x18\xd8\x85\x75\x17\x10\x00\x00")

func dataStub_flasherJsonBytes() ([]byte, error) {
	return bindataRead(
		_dataStub_flasherJson,
		"data/stub_flasher.json",
	)
}

func dataStub_flasherJson() (*asset, error) {
	bytes, err := dataStub_flasherJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "data/stub_flasher.json", size: 4119, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/stub_flasher.json": dataStub_flasherJson,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"data": &bintree{nil, map[string]*bintree{
		"stub_flasher.json": &bintree{dataStub_flasherJson, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

